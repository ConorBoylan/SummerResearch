import numpy as np
import matplotlib.pyplot as plt
import math

number=200 #Number of particles
propinfi=0.3 #Initial proportion of particles infected
infectivity=0.5 #Pathogen infectivity
particlesize=0.5 #Particle size
meansusceptibility=0.5 #Mean particle susceptibility
susceptibilitydeviation=0.1 #Particle susceptibility standard deviation
boxlength=5 #Dimensions of constraining box
meanmomentum=650 #Mean initial momentum (in each direction)
momentumdeviation=50 #Momentum standard deviation
meanmass=60 #Mean mass
massdeviation=15 #Mass standard deviation
meanrecov=10 #Mean number of time increments taken to recover
recovdeviation=2 #Standard deviation in number of time increments taken to recover
start=0 #Start time (kind of redundant)
end=10 #End time
division=0.01 #Time division
t=np.arange(start,end,division) #Time variable (haven't used it yet)
simno=int((end-start)/division) #Number of time increments
coeffres=0.5

#Creating randomly positive and negative arrays (to sign quantities)
posnegrand=np.random.rand(number)
posnegrand2=np.random.rand(number)
posneg=np.zeros(number)
posneg2=np.zeros(number)
i=0
while i<number:
    if posnegrand[i]>=0.5:
        posneg[i]=1
    if posnegrand[i]<0.5:
        posneg[i]=-1
    if posnegrand2[i]>=0.5:
        posneg2[i]=1
    if posnegrand2[i]<0.5:
        posneg2[i]=-1
    i=i+1

mass=np.zeros(number) #Array of particle masses
i=0
while i<number:
    mass[i]=np.random.normal(meanmass,massdeviation)
    i=i+1

recovtime=np.zeros(number) #Array of the recovery times for each particle
i=0
while i<number:
    recovtime[i]=int(np.random.normal(meanrecov,recovdeviation))
    i=i+1

susceptibility=np.zeros(number) #Array of particles' susceptibilities to infection
i=0
while i<number:
    susceptibility[i]=np.random.normal(meansusceptibility,susceptibilitydeviation)
    i=i+1

inf=np.zeros(number*simno).reshape(number,simno) #Array denoting which particles are infected
#Filling in initial infected particles
i=0
while i<number:
    if posnegrand[i]<=propinfi:
        inf[i,0]=1
    if posnegrand[i]>propinfi:
        inf[i,0]=0
    i=i+1

x=np.zeros(number*simno).reshape(number,simno) #Array of all x values
xi=(np.random.rand(number)*(boxlength-(2*particlesize))) #Array of initial x values (unsigned)
y=np.zeros(number*simno).reshape(number,simno) #Array of all y values
yi=(np.random.rand(number)*(boxlength-(2*particlesize))) #Array of initial y values (unsigned)
#Inputting initial x and y values (signed)
i=0
while i<number:
    x[i,0]=xi[i]*posneg[i]
    y[i,0]=yi[i]*posneg2[i]
    i=i+1

angle=np.random.rand(number)*2*math.pi #Array of random initial angles of progression
speed=np.zeros(number) #Array of particles' initial speeds
i=0
while i<number:
    speed[i]=(np.random.normal(meanmomentum,momentumdeviation))/mass[i]
    i=i+1

vx=np.zeros(number*simno).reshape(number,simno) #Array of all x velocities
vxi=np.zeros(number) #Array of intitial x velocities
vy=np.zeros(number*simno).reshape(number,simno) #Array of all y velocities
vyi=np.zeros(number) #Array of initial y velocities
#Generating and inputting initial x and y velocities
i=0
while i<number:
    vxi[i]=speed[i]*math.cos(angle[i]*posneg[i])
    vyi[i]=speed[i]*math.sin(angle[i]*posneg2[i])
    vx[i,0]=vxi[i]
    vy[i,0]=vyi[i]
    i=i+1

#Incrementing positions
mindist=boxlength-particlesize #Just to make things shorter in for loop
i=0
while i<number:
    j=0
    while j<simno-1:
        #Wall collisions
        if abs(x[i,j])<mindist:
            x[i,j+1]=x[i,j]+vx[i,j]*division
            vx[i,j+1]=vx[i,j]
        if abs(y[i,j])<mindist:
            y[i,j+1]=y[i,j]+vy[i,j]*division
            vy[i,j+1]=vy[i,j]
        if abs(x[i,j])>=mindist:
            x[i,j+1]=x[i,j]-vx[i,j]*division
            vx[i,j+1]=-vx[i,j]
        if abs(y[i,j])>=mindist:
            y[i,j+1]=y[i,j]-vy[i,j]*division
            vy[i,j+1]=-vy[i,j]
        j=j+1
    i=i+1



#avgvx=np.zeros(number*simno).reshape(number,simno)
#avgvy=np.zeros(number*simno).reshape(number,simno)
#jray=np.zeros(simno)
#i=1
#while i<simno:
 #   jray[0]=1
  #  jray[i]=jray[i-1]+1
   # i=i+1
#iray=np.zeros(number)
#i=1
#while i<number:
 #   iray[0]=1
  #  iray[i]=iray[i-1]+1
   # i=i+1
#sumvx=np.zeros(number*simno).reshape(number,simno)
#sumvy=np.zeros(number*simno).reshape(number,simno)
#avgx=np.zeros(number)
#avgy=np.zeros(number)
#nosignvx=np.zeros(number*simno).reshape(number,simno)
#nosignvy=np.zeros(number*simno).reshape(number,simno)
#i=0
#while i<number:
 #   j=0
  #  while j<simno:
   #     nosignvx[i,j]=abs(vx[i,j])
    #    nosignvy[i,j]=abs(vy[i,j])
     #   sumvx[i,j]=sumvx[i,j-1]+nosignvx[i,j]
      #  sumvy[i,j]=sumvy[i,j-1]+nosignvy[i,j]
       # avgvx[i,j]=sumvx[i,j]/jray[j]
        #avgvy[i,j]=sumvy[i,j]/jray[j]
        #j=j+1
    #i=i+1
#i=0
#while i<number:
 #   avgx[i]=sum(avgvx[i])/simno
  #  avgy[i]=sum(avgvy[i])/simno
   # i=i+1
#trueavgx=sum(avgx)/number
#trueavgy=sum(avgy)/number
#avgdistx=trueavgx*division
#avgdisty=trueavgy*division
#avgdist=math.sqrt(avgdistx**2+avgdisty**2)
#timespentnear=avgdist/(2*particlesize)
#propestcollcount=int(round(seccollcount/((timespentnear)/division))) #Estimates the number of collisions that occur

#Velocity array with both x and y components
#v=np.zeros(number*simno*2).reshape(number,simno,2)
#i=0
#while i<number:
#    j=0
#    while j<simno:
#        v[i,j,0]=vx[i,j]
#        v[i,j,1]=vy[i,j]
#        j=j+1
#    i=i+1

#Position array with both x and y components
#r=np.zeros(number*simno*2).reshape(number,simno,2)
#i=0
#while i<number:
#    j=0
#    while j<simno:
#        r[i,j,0]=x[i,j]
#        r[i,j,1]=y[i,j]
#        j=j+1
#    i=i+1

collcount=0 #Collision counter (counts up for each time increment particles are within distance)
i=0
while i<number:
    k=0
    while k<number:
        j=0
        dx=0
        dy=0
        d=0
        while j<simno-1:
            if i!=k:
                dx=abs(x[i,j]-x[k,j])
                if dx<=(2*particlesize):
                    dy=abs(y[i,j]-y[k,j])
                    d=dx**2+dy**2
                    if d<=(2*particlesize):
                        collcount=collcount+1
                        if inf[i,j]==1.0 or inf[k,j]==1.0:
                            inf[k,j+1]=1.0
                            inf[i,j+1]=1.0
                        if inf[i,j]==0.0 and inf[k,j]==0.0:
                            inf[i,j+1]=0.0
                            inf[k,j+1]=0.0
                    else:
                       inf[i,j+1]=inf[i,j] 
                       inf[k,j+1]=inf[k,j] 
                else:
                    inf[i,j+1]=inf[i,j] 
                    inf[k,j+1]=inf[k,j]
            j=j+1
        k=k+1
    i=i+1


#magv=np.zeros(number*simno).reshape(number,simno)
#i=0
#while i<number:
 #   j=0
  #  while j<simno:
   #     magv[i,j]=math.sqrt(v[i,j,0]**2+v[i,j,1]**2)
    #    j=j+1
    #i=i+1

#costheta=np.zeros(number*number*simno).reshape(number,number,simno)
#i=0
#while i<number:
 #   j=0
  #  while j<number:
   #     k=0
    #    while k<simno:
     #       costheta[i,j,k]=(np.dot(v[i,k],v[j,k])/(magv[i,k]*magv[j,k]))
      #      k=k+1
       # j=j+1
    #i=i+1

#theta=np.zeros(number*number*simno).reshape(number,number,simno)
#i=0
#while i<number:
 #   j=0
  #  while j<number:
   #     k=0
    #    while k<simno:
     #       theta[i,j,k]=math.atan((x[i,k]-x[j,k])/(y[i,k]-y[j,k]))
      #      k=k+1
       # j=j+1
    #i=i+1
#xplot=x[0,0]
#i=0
#while i<number:
 #   xplot=np.append(xplot,x[i])
  #  i=i+1

diffinf=np.zeros(number*simno).reshape(simno,number) #Reshaped inf array
i=0
while i<simno:
    j=0
    while j<number:
        diffinf[i,j]=inf[j,i]
        j=j+1
    i=i+1

noinf=np.zeros(simno) #Array of number of infected particles at each time increment
i=0
while i<simno:
    noinf[i]=np.count_nonzero(diffinf[i])
    i=i+1

#Log of noinf
#loginf=np.zeros(simno)
#i=0
#while i<simno:
#    loginf[i]=math.log(noinf[i],10)
#    i=i+1

#Plots all particle paths on a single graph
#i=0
#while i<number:
#    plt.plot(x[i],y[i])
#    plt.ylim(-1.1*boxlength,1.1*boxlength)
#    plt.xlim(-1.1*boxlength,1.1*boxlength)
#    i=i+1

#e**(noinf)
#expnoinf=np.zeros(simno)
#i=0
#while i<simno:
#    expnoinf[i]=math.exp(noinf[i])
#    i=i+1
