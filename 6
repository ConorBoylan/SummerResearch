import numpy as np
import math
import matplotlib.pyplot as plt

number=4
start=0
end=20
division=0.01
simno=int((end-start)/division)
boxlength=10
particlesize=0.2
meanmass=60 #Mean mass
massdeviation=15 #Mass standard deviation
meanmomentum=650 #Mean initial momentum (in each direction)
momentumdeviation=50 #Momentum standard deviation

mass=np.zeros(number) #Array of particle masses
i=0
while i<number:
    mass[i]=np.random.normal(meanmass,massdeviation)
    i=i+1

#Randomly positive and negative arrays
posnegrand=np.random.rand(number)
posnegrand2=np.random.rand(number)
posneg=np.zeros(number)
posneg2=np.zeros(number)
i=0
while i<number:
    if posnegrand[i]>=0.5:
        posneg[i]=1
    else:
        posneg[i]=-1
    if posnegrand2[i]>=0.5:
        posneg2[i]=1
    else:
        posneg2[i]=-1
    i=i+1

x=np.zeros(number*simno).reshape(number,simno) #Array of all x values
y=np.zeros(number*simno).reshape(number,simno) #Array of all y values
xi=np.random.rand(number)*(boxlength-particlesize) #Array of initial x values (unsigned)
yi=np.random.rand(number)*(boxlength-particlesize) #Array of initial y values (unsigned)
#Inputting initial x and y values
i=0
while i<number:
    x[i,0]=xi[i]*posneg[i]
    y[i,0]=yi[i]*posneg2[i]
    i=i+1

vx=np.zeros(number*simno).reshape(number,simno) #Array of all x velocities
vy=np.zeros(number*simno).reshape(number,simno) #Array of all y velocities

speed=np.zeros(number) #Array of particles' intitial speeds
angles=np.random.random(number)*math.pi*2 #Array of particles' intiial angles of projection
#Creating and inputting initial x and y velocities
i=0
while i<number:
    speed[i]=(np.random.normal(meanmomentum,momentumdeviation))/mass[i]
    vx[i,0]=speed[i]*math.cos(angles[i])
    vy[i,0]=speed[i]*math.sin(angles[i])
    i=i+1

def dist(a,b,c): #Function to evaluate distance between two particles
    return np.sqrt((x[a,c]-x[b,c])**2+(y[a,c]-y[b,c])**2)

averagevel=np.average(speed) #Average of initial speeds
worstcasenocoll=int(np.ceil((particlesize/averagevel)/division)) #Worst case number of increments for exclusion
nocoll=worstcasenocoll+1 #Number of increments for exclusion
check=np.zeros(number*simno).reshape(number,simno) #Array to check for exclusion

mindist=boxlength-particlesize #Just to make things shorter in for loop
j=0
while j<simno:
    #Wall collisions
    i=0
    while i<number and j!=simno-1:
        if abs(x[i,j])>mindist:
            x[i,j+1]=x[i,j]-vx[i,j]*division
            vx[i,j+1]=-vx[i,j]
        else:
            x[i,j+1]=x[i,j]+vx[i,j]*division
            vx[i,j+1]=vx[i,j]
        if abs(y[i,j])>=mindist:
            y[i,j+1]=y[i,j]-vy[i,j]*division
            vy[i,j+1]=-vy[i,j]
        else:
            y[i,j+1]=y[i,j]+vy[i,j]*division
            vy[i,j+1]=vy[i,j]
        i=i+1
    #Particle collisions
    h=0
    while h<number:
        k=0
        while k<number:
            if k!=h and check[k,j]==0.0 and check[h,j]==0.0:
                if dist(h,k,j)<=2*particlesize and j!=simno-1:
                    theta=math.atan((y[h,j]-y[k,j])/(x[h,j]-x[k,j])) 
                    alpha=math.atan((vx[h,j])/(vy[h,j]))
                    beta=math.atan((vx[k,j])/(vy[k,j]))
                    magvh=np.sqrt(vx[h,j]**2+vy[h,j]**2)
                    magvk=np.sqrt(vx[k,j]**2+vy[k,j]**2)
                    vxhinitialprime=magvh*math.sin(alpha-theta)
                    vxkinitialprime=magvk*math.sin(beta+theta)
                    vyhprime=magvh*math.cos(alpha-theta)
                    vykprime=magvk*math.cos(beta+theta)
                    vxhfinalprime=(mass[h]-mass[k])/(mass[h]+mass[k])*(vxhinitialprime-vxkinitialprime)
                    vxkfinalprime=(2*mass[h]/(mass[h]+mass[k]))*(vxhinitialprime-vxkinitialprime)
                    newmagvh=np.sqrt(vyhprime**2+vxhfinalprime**2)
                    newmagvk=np.sqrt(vykprime**2+vxkfinalprime**2)
                    newalpha=math.atan((vyhprime)/(vxhfinalprime))
                    newbeta=math.atan((vykprime)/(vxkfinalprime))
                    newvxh=newmagvh*math.cos(newalpha)
                    newvyh=newmagvh*math.sin(newalpha)
                    newvxk=newmagvk*math.cos(newbeta)
                    newvyk=newmagvk*math.sin(newbeta)
                    x[h,j+1]=x[h,j]+(newvxh)*division
                    y[h,j+1]=y[h,j]+(newvyh)*division
                    x[k,j+1]=x[k,j]+(newvxk)*division
                    y[k,j+1]=y[k,j]+(newvyk)*division
                    vx[h,j]=newvxh
                    vx[k,j]=newvxk
                    vy[h,j]=newvyh
                    vy[k,j]=newvyk
                    vx[h,j+1]=newvxh
                    vx[k,j+1]=newvxk
                    vy[h,j+1]=newvyh
                    vy[k,j+1]=newvyk
                    #Exclusion (prevents multiple subsequent positions between the same particles)
                    d=0
                    while d<nocoll and j+d!=simno-1:
                        check[h,j+d]=1.0
                        check[k,j+d]=1.0
                        d=d+1
            k=k+1
        h=h+1
    j=j+1
