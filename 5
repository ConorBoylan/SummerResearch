import numpy as np
import matplotlib.pyplot as plt
import math

number=40 #Number of particles
propinfi=0.7 #Initial proportion of particles infected
infectivity=0.5 #Pathogen infectivity (NOT INCORPORATED YET)
particlesize=0.1 #Particle size
meansusceptibility=0.5 #Mean particle susceptibility (NOT INCORPORATED YET)
susceptibilitydeviation=0.1 #Particle susceptibility standard deviation (NOT INCORPORATED YET)
boxlength=10.0 #Dimensions of constraining box
meanmomentum=650 #Mean initial momentum (in each direction)
momentumdeviation=50 #Momentum standard deviation
meanmass=60 #Mean mass
massdeviation=15 #Mass standard deviation
meanrecov=10 #Mean number of time increments taken to recover (NOT INCORPORATED YET)
recovdeviation=2 #Standard deviation in number of time increments taken to recover (NOT INCORPORATED YET)
start=0 #Start time (kind of redundant)
end=10 #End time
division=0.01 #Time division
t=np.arange(start,end,division) #Time variable (not used yet)
simno=int((end-start)/division) #Number of time increments
coeffres=0.5 #Coefficient of restitution (NOT INCORPORATED YET)

#Creating randomly positive and negative arrays (to sign quantities)
posnegrand=np.random.rand(number)
posnegrand2=np.random.rand(number)
posneg=np.zeros(number)
posneg2=np.zeros(number)
i=0
while i<number:
    if posnegrand[i]>=0.5:
        posneg[i]=1
    else:
        posneg[i]=-1
    if posnegrand2[i]>=0.5:
        posneg2[i]=1
    else:
        posneg2[i]=-1
    i=i+1

mass=np.zeros(number) #Array of particle masses
i=0
while i<number:
    mass[i]=np.random.normal(meanmass,massdeviation)
    i=i+1

recovtime=np.zeros(number) #Array of the recovery times for each particle
i=0
while i<number:
    recovtime[i]=int(np.random.normal(meanrecov,recovdeviation))
    i=i+1

susceptibility=np.zeros(number) #Array of particles' susceptibilities to infection
i=0
while i<number:
    susceptibility[i]=np.random.normal(meansusceptibility,susceptibilitydeviation)
    i=i+1

inf=np.zeros(number*simno).reshape(number,simno) #Array denoting which particles are infected
#Filling in initial infected particles
i=0
while i<number:
    if posnegrand[i]<=propinfi:
        inf[i,0]=1
    else:
        inf[i,0]=0
    i=i+1

x=np.zeros(number*simno).reshape(number,simno) #Array of all x values
xi=(np.random.rand(number)*(boxlength-(particlesize))) #Array of initial x values (unsigned)
y=np.zeros(number*simno).reshape(number,simno) #Array of all y values
yi=(np.random.rand(number)*(boxlength-(particlesize))) #Array of initial y values (unsigned)
#Inputting initial x and y values (signed)
i=0
while i<number:
    x[i,0]=xi[i]*posneg[i]
    y[i,0]=yi[i]*posneg2[i]
    i=i+1

angle=np.random.rand(number)*2*math.pi #Array of random initial angles of projection
speed=np.zeros(number) #Array of particles' initial speeds
i=0
while i<number:
    speed[i]=(np.random.normal(meanmomentum,momentumdeviation))/mass[i]
    i=i+1

vx=np.zeros(number*simno).reshape(number,simno) #Array of all x velocities
vxi=np.zeros(number) #Array of intitial x velocities
vy=np.zeros(number*simno).reshape(number,simno) #Array of all y velocities
vyi=np.zeros(number) #Array of initial y velocities

#Generating and inputting initial x and y velocities
i=0
while i<number:
    vxi[i]=speed[i]*math.cos(angle[i])
    vyi[i]=speed[i]*math.sin(angle[i])
    vx[i,0]=vxi[i]
    vy[i,0]=vyi[i]
    i=i+1

#Attempting to subdivide box so as to minimise the number of collision checks here
maxnodiv=boxlength/(2*particlesize) #Don't exceed this number of divisions (division here becomes smaller than the particle)
nodiv=25 #Number of divisions along each axis per quadrant
whichboxx=np.zeros(number*simno).reshape(number,simno)
whichboxy=np.zeros(number*simno).reshape(number,simno)

collcheck=np.zeros(number*number*simno).reshape(number,number,simno) #Array which 
#Incrementing positions
mindist=boxlength-particlesize #Just to make things shorter in for loop
collcount=0
i=0
while i<number:
    j=0
    while j<simno-1:
        #Wall collisions
        if abs(x[i,j])>=mindist:
            x[i,j+1]=x[i,j]-vx[i,j]*division
            vx[i,j+1]=-vx[i,j]
        else:
            x[i,j+1]=x[i,j]+vx[i,j]*division
            vx[i,j+1]=vx[i,j]
        if abs(y[i,j])>=mindist:
            y[i,j+1]=y[i,j]-vy[i,j]*division
            vy[i,j+1]=-vy[i,j]
        else:
            y[i,j+1]=y[i,j]+vy[i,j]*division
            vy[i,j+1]=vy[i,j]
        #Collisions and infection
        k=0
        while k<number:
            whichboxx[k,j]=np.ceil((x[k,j]/boxlength)*nodiv)
            whichboxy[k,j]=np.ceil((y[k,j]/boxlength)*nodiv)
            if i!=k:
                if abs(whichboxx[i,j]-whichboxx[k,j])<=1 and abs(whichboxy[i,j]-whichboxy[k,j])<=1:
                    dx=abs(x[i,j]-x[k,j])
                    if dx<=(2*particlesize):
                        dy=abs(y[i,j]-y[k,j])
                        if dy<=(2*particlesize):
                            d=(dx**2)+(dy**2)
                            if d<=(2*particlesize):
                                if collcheck[i,k,j]==0.0:
                                    collcount=collcount+1
                                    theta=math.atan((y[i,j]-y[k,j])/(x[i,j]-x[k,j]))
                                    vyiprime=(vy[i,j]-vx[i,j]*math.tan(theta))/(math.sin(theta)*math.tan(theta)+math.cos(theta))
                                    vykprime=(vy[k,j]-vx[k,j]*math.tan(theta))/(math.sin(theta)*math.tan(theta)+math.cos(theta))
                                    vxiprime=(vy[i,j]*math.tan(theta)+vx[i,j])/(math.cos(theta)+math.tan(theta)*math.sin(theta))
                                    vxkprime=(vy[k,j]*math.tan(theta)+vx[i,j])/(math.cos(theta)+math.tan(theta)*math.sin(theta))
                                    newvxiprime=(((mass[i]-mass[k])*vxiprime)+(2*mass[k]*vx[k,j]))/(mass[i]+mass[k])
                                    newvxkprime=(((mass[k]-mass[i])*vxkprime)+(2*mass[i]*vx[i,j]))/(mass[k]+mass[i])
                                    newvxi=newvxiprime*math.cos(theta)
                                    newvxk=newvxkprime*math.cos(theta)
                                    newvyi=math.sqrt(vyiprime**2+newvxi**2-newvxi**2)
                                    newvyk=math.sqrt(vykprime**2+newvxk**2-newvxk**2)
                                    x[i,j+1]=x[i,j]+(newvxi)*division
                                    y[i,j+1]=y[i,j]+(newvyi)*division
                                    x[k,j+1]=x[i,j]+(newvxk)*division
                                    y[i,j+1]=y[i,j]+(newvyk)*division
                                    vx[i,j+1]=newvxi
                                    vx[k,j+1]=newvxk
                                    vy[i,j+1]=newvyi
                                    vy[k,j+1]=newvyk
                                    collcheck[i,k,j]=1.0
                                    collcheck[k,i,j]=1.0
                                    if inf[i,j]==1.0 or inf[k,j]==1.0:
                                        inf[k,j+1]=1.0
                                        inf[i,j+1]=1.0
                                    if inf[i,j]==0.0 and inf[k,j]==0.0:
                                        inf[i,j+1]=0.0
                                        inf[k,j+1]=0.0
                                    else:
                                        inf[i,j+1]=inf[i,j] 
                                        inf[k,j+1]=inf[k,j]
                                else:
                                    inf[i,j+1]=inf[i,j] 
                                    inf[k,j+1]=inf[k,j]
                            else:
                                inf[i,j+1]=inf[i,j] 
                                inf[k,j+1]=inf[k,j]
                        else:
                            inf[i,j+1]=inf[i,j] 
                            inf[k,j+1]=inf[k,j]
                    else:
                        inf[i,j+1]=inf[i,j] 
                        inf[k,j+1]=inf[k,j]
                else:
                    inf[i,j+1]=inf[i,j] 
                    inf[k,j+1]=inf[k,j]
            k=k+1
        j=j+1
    i=i+1

#Velocity array with both x and y components
#v=np.zeros(number*simno*2).reshape(number,simno,2)
#i=0
#while i<number:
#    j=0
#    while j<simno:
#        v[i,j,0]=vx[i,j]
#        v[i,j,1]=vy[i,j]
#        j=j+1
#    i=i+1

#Position array with both x and y components
#r=np.zeros(number*simno*2).reshape(number,simno,2)
#i=0
#while i<number:
#    j=0
#    while j<simno:
#        r[i,j,0]=x[i,j]
#        r[i,j,1]=y[i,j]
#        j=j+1
#    i=i+1

diffinf=np.zeros(number*simno).reshape(simno,number) #Reshaped inf array
i=0
while i<simno:
    j=0
    while j<number:
        diffinf[i,j]=inf[j,i]
        j=j+1
    i=i+1

noinf=np.zeros(simno) #Array of number of infected particles at each time increment
i=0
while i<simno:
    noinf[i]=np.count_nonzero(diffinf[i])
    i=i+1

#Log of noinf
#loginf=np.zeros(simno)
#i=0
#while i<simno:
#    loginf[i]=math.log(noinf[i],10)
#    i=i+1

#Plots all particle paths on a single graph
#i=0
#while i<number:
#    plt.plot(x[i],y[i])
#    plt.ylim(-1.1*boxlength,1.1*boxlength)
#    plt.xlim(-1.1*boxlength,1.1*boxlength)
#    i=i+1

#e**(noinf)
#expnoinf=np.zeros(simno)
#i=0
#while i<simno:
#    expnoinf[i]=math.exp(noinf[i])
#    i=i+1
