import numpy as np
import math
import matplotlib.pyplot as plt

number=10 #Number of particles
propinfi=0.2 #Initial proportion of particles infected
particlesize=0.5 #Particle size
meansusceptibility=0.5 #Mean particle susceptibility (NOT INCORPORATED YET)
susceptibilitydeviation=0.1 #Particle susceptibility standard deviation (NOT INCORPORATED YET)
meaninfectivity=0.5 #Mean particle infectivity (NOT INCORPORATED YET)
infectivitydeviation=0.1 #Particle infectivity standard deviation (NOT INCORPORATED YET)
boxlength=5.0 #Dimensions of constraining box
meanmomentum=650 #Mean initial momentum (in each direction)
momentumdeviation=50 #Momentum standard deviation
meanmass=60 #Mean mass
massdeviation=15 #Mass standard deviation
meanrecov=10 #Mean number of time increments taken to recover (NOT INCORPORATED YET)
recovdeviation=2 #Standard deviation in number of time increments taken to recover (NOT INCORPORATED YET)
start=0 #Start time (kind of redundant)
end=10 #End time
division=0.01 #Time division
simno=int((end-start)/division) #Number of time increments

#Creating randomly positive and negative arrays (to sign quantities)
posnegrand=np.random.rand(number)
posnegrand2=np.random.rand(number)
posneg=np.zeros(number)
posneg2=np.zeros(number)
i=0
while i<number:
    if posnegrand[i]>=0.5:
        posneg[i]=1
    else:
        posneg[i]=-1
    if posnegrand2[i]>=0.5:
        posneg2[i]=1
    else:
        posneg2[i]=-1
    i=i+1

mass=np.zeros(number) #Array of particle masses
i=0
while i<number:
    mass[i]=np.random.normal(meanmass,massdeviation)
    i=i+1

recovtime=np.zeros(number) #Array of the recovery times for each particle
i=0
while i<number:
    recovtime[i]=int(np.random.normal(meanrecov,recovdeviation))
    i=i+1

susceptibility=np.zeros(number) #Array of particles' susceptibilities to infection
i=0
while i<number:
    susceptibility[i]=np.random.normal(meansusceptibility,susceptibilitydeviation)
    i=i+1

infectivity=np.zeros(number) #Array of particles' infectivities
i=0
while i<number:
    infectivity[i]=np.random.normal(meaninfectivity,infectivitydeviation)
    i=i+1

inf=np.zeros(number*simno).reshape(number,simno) #Array denoting which particles are infected
#Filling in initial infected particles
i=0
while i<number:
    if posnegrand[i]<=propinfi:
        inf[i,0]=1
    else:
        inf[i,0]=0
    i=i+1

mass=np.zeros(number) #Array of particle masses
i=0
while i<number:
    mass[i]=np.random.normal(meanmass,massdeviation)
    i=i+1

x=np.zeros(number*simno).reshape(number,simno) #Array of all x values
y=np.zeros(number*simno).reshape(number,simno) #Array of all y values
xi=np.random.rand(number)*(boxlength-particlesize) #Array of initial x values (unsigned)
yi=np.random.rand(number)*(boxlength-particlesize) #Array of initial y values (unsigned)

#Inputting initial x and y values
i=0
while i<number:
    x[i,0]=xi[i]*posneg[i]
    y[i,0]=yi[i]*posneg2[i]
    i=i+1

vx=np.zeros(number*simno).reshape(number,simno) #Array of all x velocities
vy=np.zeros(number*simno).reshape(number,simno) #Array of all y velocities

speed=np.zeros(number) #Array of particles' intitial speeds
angles=np.random.random(number)*math.pi*2 #Array of particles' intiial angles of projection
#Creating and inputting initial x and y velocities
i=0
while i<number:
    speed[i]=(np.random.normal(meanmomentum,momentumdeviation))/mass[i]
    vx[i,0]=speed[i]*math.cos(angles[i])
    vy[i,0]=speed[i]*math.sin(angles[i])
    i=i+1

def dist(a,b,c): #Function that evaluates the distance between two particles
    return np.sqrt((x[a,c]-x[b,c])**2+(y[a,c]-y[b,c])**2)

def rot(vx,vy,h,j,theta): #Function that rotates vector, given orthogonal components (returns x',y' components)
    return vx[h,j]*math.cos(theta)-vy[h,j]*math.sin(theta), vx[h,j]*math.sin(theta)+vy[h,j]*math.cos(theta)

def secondrot(vx,vy,theta): #Does the same as first function, just with the input vector components not being arrays
    return vx*math.cos(theta)-vy*math.sin(theta), vx*math.sin(theta)+vy*math.cos(theta)

def coll(h,k,j): #Function that deals with particle collisions
    theta=math.atan((y[k,j]-y[h,j])/(x[k,j]-x[h,j])) #Angle from x axis to line connecting two particles
    #Rotation
    vxhinitialprime=rot(vx,vy,h,j,theta)[0]
    vyhprime=rot(vx,vy,h,j,theta)[1]
    vxkinitialprime=rot(vx,vy,k,j,theta)[0]
    vykprime=rot(vx,vy,k,j,theta)[1]
    #Velocity calculation
    vxkprimerel=vxkinitialprime-vxhinitialprime
    vxhfinalprimerel=(2*mass[k]/(mass[h]+mass[k]))*vxkprimerel
    vxkfinalprimerel=((mass[k]-mass[h])/(mass[k]+mass[h]))*vxkprimerel
    vxkfinalprime=vxkfinalprimerel+vxhinitialprime
    vxhfinalprime=vxhfinalprimerel+vxhinitialprime
    #Rotation back
    newvxh=secondrot(vxhfinalprime,vyhprime,-theta)[0]
    newvyh=secondrot(vxhfinalprime,vyhprime,-theta)[1]
    newvxk=secondrot(vxkfinalprime,vykprime,-theta)[0]
    newvyk=secondrot(vxkfinalprime,vykprime,-theta)[1]
    #Next position
    x[h,j+1]=x[h,j]+(newvxh)*division
    y[h,j+1]=y[h,j]+(newvyh)*division
    x[k,j+1]=x[k,j]+(newvxk)*division
    y[k,j+1]=y[k,j]+(newvyk)*division
    #Applies velocities
    vx[h,j]=newvxh
    vx[k,j]=newvxk
    vy[h,j]=newvyh
    vy[k,j]=newvyk
    vx[h,j+1]=newvxh
    vx[k,j+1]=newvxk
    vy[h,j+1]=newvyh
    vy[k,j+1]=newvyk

averagevel=np.average(speed) #Average of initial speeds
worstcasenocoll=int(np.ceil((particlesize/averagevel)/division)) #Worst case number of increments for exclusion
nocoll=worstcasenocoll+1 #Number of increments for exclusion
collcheck=np.zeros(number*simno).reshape(number,simno) #Array to check for exclusion
numberofcollisions=np.zeros(number)

mindist=boxlength-particlesize #Just to make things shorter in for loop
wallforce=np.zeros(simno)
j=0
while j<simno:
    #Wall collisions
    i=0
    while i<number and j!=simno-1:
        if abs(x[i,j])>mindist:
            x[i,j+1]=x[i,j]-vx[i,j]*division
            vx[i,j+1]=-vx[i,j]
            wallforce[j]=wallforce[j]+abs(2*mass[i]*vx[i,j])
        else:
            x[i,j+1]=x[i,j]+vx[i,j]*division
            vx[i,j+1]=vx[i,j]
        if abs(y[i,j])>=mindist:
            y[i,j+1]=y[i,j]-vy[i,j]*division
            vy[i,j+1]=-vy[i,j]
            wallforce[j]=wallforce[j]+abs(2*mass[i]*vy[i,j])
        else:
            y[i,j+1]=y[i,j]+vy[i,j]*division
            vy[i,j+1]=vy[i,j]
        i=i+1
    #Particle collisions
    h=0
    while h<number:
        k=0
        while k<number:
            if k!=h and collcheck[k,j]==0.0 and collcheck[h,j]==0.0:
                if dist(h,k,j)<=2*particlesize and j!=simno-1:
                    coll(h,k,j)
                    #Exclusion (prevents multiple subsequent positions between the same particles)
                    d=0
                    while d<nocoll and j+d!=simno-1:
                        collcheck[h,j+d]=1.0
                        collcheck[k,j+d]=1.0
                        d=d+1
                    numberofcollisions[h]=numberofcollisions[h]+1
                    numberofcollisions[k]=numberofcollisions[k]+1
                    if inf[h,j]==1.0 or inf[k,j]==1.0:
                        if inf[h,j]==1.0 and inf[k,j]==1.0:
                            inf[h,j+1]=inf[h,j]
                            inf[k,j+1]=inf[k,j]
                        elif inf[h,j]==1.0:
                            inf[h,j+1]=1.0
                            inf[k,j+1]=1.0
                        elif inf[k,j]==1.0:
                            inf[h,j+1]=1.0
                            inf[k,j+1]=1.0
                    else:
                        inf[h,j+1]=inf[h,j]
                        inf[k,j+1]=inf[k,j]
                elif j!=simno-1:
                    inf[h,j+1]=inf[h,j] 
                    inf[k,j+1]=inf[k,j]
            elif j!=simno-1:
                inf[h,j+1]=inf[h,j] 
                inf[k,j+1]=inf[k,j]
            k=k+1
        h=h+1
    j=j+1

diffinf=np.zeros(number*simno).reshape(simno,number) #Reshaped inf array
i=0
while i<simno:
    j=0
    while j<number:
        diffinf[i,j]=inf[j,i]
        j=j+1
    i=i+1

noinf=np.zeros(simno) #Array of number of infected particles at each time increment
i=0
while i<simno:
    noinf[i]=np.count_nonzero(diffinf[i])
    i=i+1

kineticenergies=np.zeros(number*simno).reshape(number,simno)
averagekineticenergy=np.zeros(simno)
totalkineticenergy=np.zeros(simno)

i=0
while i<number:
    kineticenergies[i]=0.5*mass[i]*(vx[i]**2+vy[i]**2)
    i=i+1
    
j=0
while j<simno:
    averagekineticenergy[j]=np.average(kineticenergies[:,j])
    j=j+1
        
j=0
while j<simno:          
    totalkineticenergy[j]=sum(kineticenergies[:,j])
    j=j+1

pressure=np.average(wallforce)

totalmomentum=np.zeros(simno)
xmomentum=np.zeros(number*simno).reshape(number,simno)
ymomentum=np.zeros(number*simno).reshape(number,simno)
totalxmomentum=np.zeros(simno)
totalymomentum=np.zeros(simno)

j=0
while j<simno:
    i=0
    while i<number:
        xmomentum[i,j]=mass[i]*vx[i,j]
        ymomentum[i,j]=mass[i]*vy[i,j]
        i=i+1
    j=j+1

j=0
while j<simno:
    totalxmomentum[j]=sum(xmomentum[:,j])
    totalymomentum[j]=sum(xmomentum[:,j])
    j=j+1

totalmomentum=np.sqrt(totalxmomentum**2+totalymomentum**2)

plt.plot(totalmomentum)
plt.ylim(0,max(totalmomentum))
plt.xlim(0,len(totalmomentum))

print '%Diff Kinetic:',((max(totalkineticenergy)-min(totalkineticenergy))/np.average(totalkineticenergy))*100
print '%Diff Momentum:',((max(totalmomentum)-min(totalmomentum))/np.average(totalmomentum))*100
